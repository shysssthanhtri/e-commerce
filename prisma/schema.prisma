// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @map("created_by_id")

    @@index([name])
    @@index([createdById])
    @@map("post")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("session")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_token")
}

model ProductCategory {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now()) @map("created_at")
    name        String
    description String

    parentProductCategoryId Int?              @map("parent_product_category_id")
    parentProductCategory   ProductCategory?  @relation("ParentProductCategory", fields: [parentProductCategoryId], references: [id], onDelete: Cascade)
    subCategories           ProductCategory[] @relation("ParentProductCategory")

    products Product[]

    @@map("product_category")
}

model ProductInventory {
    id       Int @id @default(autoincrement())
    quantity Int

    productId Int     @unique @map("product_id")
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("product_inventory")
}

model Product {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now()) @map("created_at")
    name        String
    description String

    price        Int
    thumbnailUrl String @map("thumbnail_url")

    categoryId Int             @map("category_id")
    category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    ProductInventory ProductInventory?

    @@map("product")
}
